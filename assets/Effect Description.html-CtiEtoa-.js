import{_ as s,c as a,a as e,o as t}from"./app-ClPqehFf.js";const p={};function c(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="effect-description" tabindex="-1"><a class="header-anchor" href="#effect-description"><span>Effect Description</span></a></h1><p>It&#39;s important to help users understand your effects. The system provides a feature to generate a description based on an <code>EffectInfo</code>.</p><h3 id="description-template" tabindex="-1"><a class="header-anchor" href="#description-template"><span>Description Template</span></a></h3><p>To generate a runtime description, you need to provide a Description Template first.</p><p>Example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> myTemplate <span class="token operator">=</span> <span class="token string">&quot;Deal extra {Effect_Atk_Ratio.value} damage to enemies with full HP.&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> myEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectInfo</span><span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token string">&quot;TriggerEffect_Sample&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;Atk_Ratio&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">12</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> effectSystem<span class="token punctuation">.</span><span class="token function">GetCustomEffectsDescription</span><span class="token punctuation">(</span>myTemplate<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>myEffect<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// result is &quot;Deal extra 12 damage to enemies with full HP.&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-rule-of-the-template" tabindex="-1"><a class="header-anchor" href="#the-rule-of-the-template"><span>The rule of the Template</span></a></h3><p>The template uses keywords to detect which parts of the template should be replaced. Here are the rules for defining a keyword:</p><ul><li>Start with the <code>{</code> character</li><li>End with the <code>}</code> character</li><li>Use <code>Effect_</code> or <code>#</code> character to define the EffectType (e.g., <code>#Atk_Ratio</code> means the <code>Atk_Ratio</code> EffectType).</li><li>Use <code>.</code> to access members of the EffectInfo, The <code>.</code> can continue to access keys from the table below.</li><li>Use <code>subinfo</code> or <code>&gt;</code> to access the <code>EffectInfo</code> in <code>subinfo</code> s | Key | Description | | ------------------- | ------------------------------------------------------------------------------------------ | | value | use the <code>value</code> member in the <code>EffectInfo</code> | | val | same as value but simplified | | maintainTime | use the <code>maintainTime</code> member in the <code>EffectInfo</code> | | time | same as <code>maintainTime</code> but simplified | | cooldownTime | use the <code>cooldownTime</code> member in the <code>EffectInfo</code> | | cd | same as <code>cooldownTime</code> but simplified | | activeProbability | use the <code>activeProbability</code> member in the <code>EffectInfo</code> | | activeProb | same as <code>activeProbability</code> but simplified | | deactiveProbability | use the <code>deactiveProbability</code> member in the <code>EffectInfo</code> | | deactiveProb | same as <code>deactiveProbability</code> but simplified | | :% | The value will be display as percentage, the value will be multiplied by 100 and display as oo% |</li></ul><h2 id="default-description" tabindex="-1"><a class="header-anchor" href="#default-description"><span>Default Description</span></a></h2><p>It&#39;s recommended to create a default description for each <code>EffectType</code>.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">// First, register the template resource</span></span>
<span class="line">EffectDataProvider<span class="token punctuation">.</span><span class="token function">SetEffectDescriptionStringDelegate</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span>   </span>
<span class="line">        <span class="token comment">// m is the EffectType</span></span>
<span class="line">        <span class="token keyword">switch</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;Atk_Ratio&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token string">&quot;Deal extra {Effect_Atk_Ratio.value} damage to enemies with full HP.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;Defend&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token string">&quot;Reduce {Effect_Defend.value} damage taken.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> effect_sample_01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectInfo</span><span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token string">&quot;effect_sample_01&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;Atk_Ratio&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">123</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> effect_sample_02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectInfo</span><span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token string">&quot;effect_sample_02&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;Defend&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">999</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// After that, you can directly call EffectSystem.GetDefaultEffectDescription() to get the default description</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> effectSystem<span class="token punctuation">.</span><span class="token function">GetDefaultEffectDescription</span><span class="token punctuation">(</span>effect_sample_01<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// result is: &quot;Deal extra 123 damage to enemies with full HP.&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Or provide multiple EffectInfo objects, and the system will automatically combine all descriptions line by line</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> EffectSystem<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetDefaultEffectDescription</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>effect_sample_01<span class="token punctuation">,</span> effect_sample_02<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* </span>
<span class="line">result is:</span>
<span class="line">Deal extra 123 damage to enemies with full HP.</span>
<span class="line">Reduce 999 damage taken.</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A more complex example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">var</span></span> effect_sample_01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectInfo</span><span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token string">&quot;effect_sample_01&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;Trigger_Attach&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">subInfoIds</span><span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;effect_sample_subinfo_01&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> effect_sample_02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectInfo</span><span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token string">&quot;effect_sample_02&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;Atk_Ratio&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">maintainTime</span><span class="token punctuation">:</span> <span class="token number">4.5</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">999</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// In this case, \`effect_sample_01\` has subInfos, so we need to register the EffectDataProvider. The subInfo is queried during runtime.</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> effect_sample_subinfo_01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectInfo</span><span class="token punctuation">{</span></span>
<span class="line">    id<span class="token punctuation">:</span> <span class="token string">&quot;effect_sample_subinfo_01&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token named-parameter punctuation">type</span><span class="token punctuation">:</span> <span class="token string">&quot;Trigger_HitSelf_Constant&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">value</span><span class="token punctuation">:</span> <span class="token number">555</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>effect_sample_01<span class="token punctuation">,</span> effect_sample_02<span class="token punctuation">,</span> effect_sample_subinfo_01<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">EffectDataProvider<span class="token punctuation">.</span><span class="token function">SetEffectInfoDelegate</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> effectIds<span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> effects<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>m <span class="token operator">=&gt;</span> effectIds<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> myTemplate <span class="token operator">=</span> <span class="token string">@&quot;Deal extra {Effect_Trigger_Attach&gt;Effect_Trigger_HitSelf_Constant.value} damage to enemies with 50% or less HP.</span>
<span class="line">Increase {Effect_Atk_Ratio.value} Attack for {Effect_Atk_Ratio.time} seconds after killing an enemy.&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Provide multiple EffectInfo objects, and the system will automatically combine all descriptions line by line.</span></span>
<span class="line"><span class="token comment">// The subInfo is resolved at runtime, so only the root EffectInfos need to be passed.</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> EffectSystem<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">GetCustomEffectsDescription</span><span class="token punctuation">(</span>myTemplate<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>effect_sample_01<span class="token punctuation">,</span> effect_sample_02<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">/* </span>
<span class="line">result will be: </span>
<span class="line">Deal extra 555 damage to enemies with 50% or less HP.</span>
<span class="line">Increase 999 Attack for 4.5 seconds after killing an enemy.</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>It is recommended to use <code>EffectSystem.GetCustomEffectsDescription()</code> to generate a user-friendly description</p></blockquote>`,15)]))}const o=s(p,[["render",c],["__file","Effect Description.html.vue"]]),u=JSON.parse('{"path":"/Effect%20Description.html","title":"Effect Description","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Description Template","slug":"description-template","link":"#description-template","children":[]},{"level":3,"title":"The rule of the Template","slug":"the-rule-of-the-template","link":"#the-rule-of-the-template","children":[]},{"level":2,"title":"Default Description","slug":"default-description","link":"#default-description","children":[]}],"git":{"updatedTime":1729065665000,"contributors":[{"name":"oldman","email":"oldman@macaca.onmicrosoft.com","commits":1}]},"filePathRelative":"Effect Description.md"}');export{o as comp,u as data};
