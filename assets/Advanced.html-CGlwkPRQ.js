import{_ as s,c as a,a as e,o as t}from"./app-ClPqehFf.js";const c={};function i(p,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="advanced" tabindex="-1"><a class="header-anchor" href="#advanced"><span>Advanced</span></a></h1><h3 id="inject-model" tabindex="-1"><a class="header-anchor" href="#inject-model"><span>Inject model</span></a></h3><p><strong>Inject model</strong> is a feature that allows for easily passing parameters of different types to <code>EffectInstanceBase</code>.</p><p>When calling <code>EffectSystem.EffectTriggerCondition</code> to trigger a condition, you need to provide <code>EffectTriggerConditionInfo</code>. By including the models parameter when constructing <code>EffectTriggerConditionInfo</code>, you can pass any number of parameters of different types.</p><p>Example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterInstance</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEffectableObject</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Skill</span> skill<span class="token punctuation">;</span> <span class="token comment">//a custom class storing skill info</span></span>
<span class="line"></span>
<span class="line">    effectSystem<span class="token punctuation">.</span><span class="token function">EffectTriggerCondition</span><span class="token punctuation">(</span> </span>
<span class="line">        <span class="token string">&quot;OwnerBeforeDoAttack&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectTriggerConditionInfo</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">owner</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">targets</span><span class="token punctuation">:</span> targetsIEffectables<span class="token punctuation">,</span> skill<span class="token punctuation">)</span> <span class="token comment">//send the skill as one of the models</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Effect_Attach</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EffectTriggerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Skill</span> skill<span class="token punctuation">;</span> <span class="token comment">// being injected automatically</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Effect_Attach</span><span class="token punctuation">(</span><span class="token class-name">EffectSystem</span> effectSystem<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>effectSystem<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTrigger</span><span class="token punctuation">(</span><span class="token class-name">EffectTriggerConditionInfo</span> conditionInfo<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnTrigger</span><span class="token punctuation">(</span>conditionInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//Do something with skill variable</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timertickers-and-ieffecttimers" tabindex="-1"><a class="header-anchor" href="#timertickers-and-ieffecttimers"><span>TimerTickers and IEffectTimers</span></a></h3><p>An EffectSystem instance manages multiple <code>TimerTickers</code>, and each <code>TimerTicker</code> manages multiple <code>IEffectTimers</code>.</p><p>EffectSystem:</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>AddTimerTicker</code></td><td>Create a Timer Ticker for the system</td></tr><tr><td><code>RemoveTimerTicker</code></td><td>Remove the timer Ticker from the system</td></tr><tr><td><code>AddToTimerTicker</code></td><td>Add a IEffectTimer to a TimerTicker</td></tr><tr><td><code>RemoveFromTimerTicker</code></td><td>Remove a IEffectTimer from a TimerTicker</td></tr><tr><td><code>TickEffectTimer</code></td><td>Tick a TimerTicker by Id</td></tr></tbody></table><p>By default, EffectInstanceBase uses the &quot;Default&quot; TimerTicker.</p>`,11)]))}const o=s(c,[["render",i],["__file","Advanced.html.vue"]]),d=JSON.parse('{"path":"/Advanced.html","title":"Advanced","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Inject model","slug":"inject-model","link":"#inject-model","children":[]},{"level":3,"title":"TimerTickers and IEffectTimers","slug":"timertickers-and-ieffecttimers","link":"#timertickers-and-ieffecttimers","children":[]}],"git":{"updatedTime":1729503157000,"contributors":[{"name":"oldman","email":"oldman@macaca.onmicrosoft.com","commits":1}]},"filePathRelative":"Advanced.md"}');export{o as comp,d as data};
