import{_ as a,c as s,a as n,o as t}from"./app-DHhT2uRr.js";const i={};function c(o,e){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="serialization" tabindex="-1"><a class="header-anchor" href="#serialization"><span>Serialization</span></a></h1><p><code>MessagePack.CSharp</code> requires code generation to make <code>EffectInfo</code> available for use on AOT platforms.</p><p>First, use the <code>mpc</code> tool to generate the resolver. Here&#39;s an example:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dotnet new tool-manifest</span>
<span class="line">dotnet tool <span class="token function">install</span> MessagePack.Generator</span>
<span class="line">dotnet tool run mpc <span class="token parameter variable">-i</span> <span class="token punctuation">{</span>PATH_TO_YOUR_EFFECTPACKAGE_MODEL_FOLEDR<span class="token punctuation">}</span> <span class="token parameter variable">-o</span> ./Assets/EffectSystemResources/EffectSystem.Generated.cs <span class="token parameter variable">-r</span> EffectSystemResolver <span class="token parameter variable">-n</span> MacacaGames.EffectSystem</span>
<span class="line"></span>
<span class="line"><span class="token comment">## Example</span></span>
<span class="line"><span class="token comment">## dotnet tool run mpc -i ./MacacaPackages/EffectSystem/Model -o ./Assets/EffectSystemResources/EffectSystem.Generated.cs -r EffectSystemResolver -n MacacaGames.EffectSystem</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Next, add it to your <code>StaticCompositeResolver</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">StaticCompositeResolver<span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span></span>
<span class="line">    MacacaGames<span class="token punctuation">.</span>EffectSystem<span class="token punctuation">.</span>Resolvers<span class="token punctuation">.</span>EffectSystemResolver<span class="token punctuation">.</span>Instance<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>For more details, refer to the <a href="https://github.com/MessagePack-CSharp/MessagePack-CSharp" target="_blank" rel="noopener noreferrer">MessagePack Document</a></p>`,7)]))}const r=a(i,[["render",c],["__file","Serialization.html.vue"]]),p=JSON.parse('{"path":"/Serialization.html","title":"Serialization","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1729065665000,"contributors":[{"name":"oldman","email":"oldman@macaca.onmicrosoft.com","commits":1}]},"filePathRelative":"Serialization.md"}');export{r as comp,p as data};
