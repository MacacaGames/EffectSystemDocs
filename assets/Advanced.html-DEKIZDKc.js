import{_ as s,c as a,a as e,o as t}from"./app-C8c4JSio.js";const p={};function c(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="advanced" tabindex="-1"><a class="header-anchor" href="#advanced"><span>Advanced</span></a></h1><h3 id="inject-model" tabindex="-1"><a class="header-anchor" href="#inject-model"><span>Inject model</span></a></h3><p><strong>Inject model</strong> is a feature that allows for easily passing parameters of different types to <code>EffectInstanceBase</code>.</p><p>When calling <code>EffectSystem.EffectTriggerCondition</code> to trigger a condition, you need to provide <code>EffectTriggerConditionInfo</code>. By including the models parameter when constructing <code>EffectTriggerConditionInfo</code>, you can pass any number of parameters of different types.</p><p>Example:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharacterInstance</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IEffectableObject</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Skill</span> skill<span class="token punctuation">;</span> <span class="token comment">//a custom class storing skill info</span></span>
<span class="line"></span>
<span class="line">    effectSystem<span class="token punctuation">.</span><span class="token function">EffectTriggerCondition</span><span class="token punctuation">(</span> </span>
<span class="line">        <span class="token string">&quot;OwnerBeforeDoAttack&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectTriggerConditionInfo</span><span class="token punctuation">(</span><span class="token named-parameter punctuation">owner</span><span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token named-parameter punctuation">targets</span><span class="token punctuation">:</span> targetsIEffectables<span class="token punctuation">,</span> skill<span class="token punctuation">)</span> <span class="token comment">//send the skill as one of the models</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Effect_Attach</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EffectTriggerBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Skill</span> skill<span class="token punctuation">;</span> <span class="token comment">// being injected automatically</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">Effect_Attach</span><span class="token punctuation">(</span><span class="token class-name">EffectSystem</span> effectSystem<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>effectSystem<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTrigger</span><span class="token punctuation">(</span><span class="token class-name">EffectTriggerConditionInfo</span> conditionInfo<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">base</span><span class="token punctuation">.</span><span class="token function">OnTrigger</span><span class="token punctuation">(</span>conditionInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//Do something with skill variable</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="timertickers-and-ieffecttimers" tabindex="-1"><a class="header-anchor" href="#timertickers-and-ieffecttimers"><span>TimerTickers and IEffectTimers</span></a></h3><p>An EffectSystem instance manages multiple <code>TimerTickers</code>, and each <code>TimerTicker</code> manages multiple <code>IEffectTimers</code>.</p><p>Here are the timer-related APIs provided by the Effect System:</p><table><thead><tr><th>Method</th><th>Description</th></tr></thead><tbody><tr><td><code>AddTimerTicker</code></td><td>Create a Timer Ticker for the system</td></tr><tr><td><code>RemoveTimerTicker</code></td><td>Remove the timer Ticker from the system</td></tr><tr><td><code>AddToTimerTicker</code></td><td>Add a IEffectTimer to a TimerTicker</td></tr><tr><td><code>RemoveFromTimerTicker</code></td><td>Remove a IEffectTimer from a TimerTicker</td></tr><tr><td><code>TickEffectTimer</code></td><td>Tick a TimerTicker by Id</td></tr></tbody></table><p>When an Effect System is initialized, a <code>TimerTicker</code> with the ID &quot;Default&quot; is automatically included. By default, <code>EffectInstanceBase</code> comes with an <code>IEffectTimer</code>, which is added to the &quot;Default&quot; <code>TimerTicker</code> upon creation. Therefore, if there are no special requirements, you can control your effects simply by using <code>TickEffectTimer()</code>.</p><p>For more complex scenarios, such as when the maintainTime or cooldownTime of an effect need to use different time units, you can override maintainTimeTimerId or cooldownTimeTimerId in <code>EffectInstanceBase</code>. This allows them to be assigned to different TimerTickers.</p><p>First, add your game-specific time units.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line">effectSystem<span class="token punctuation">.</span><span class="token function">AddTimerTicker</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">effectSystem<span class="token punctuation">.</span><span class="token function">AddTimerTicker</span><span class="token punctuation">(</span><span class="token string">&quot;Turn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Override <code>maintainTimeTimerId</code> or <code>cooldownTimeTimerId</code> in <code>EffectInstanceBase</code></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EffectInstanceCustom</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">EffectInstanceBase</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">EffectInstanceCustom</span><span class="token punctuation">(</span><span class="token class-name">EffectSystem</span> effectSystem<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">base</span><span class="token punctuation">(</span>effectSystem<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//make maintain time and cooldown tick with corresponding timer </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> maintainTimeTimerId <span class="token operator">=&gt;</span> <span class="token string">&quot;Action&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> cooldownTimeTimerId <span class="token operator">=&gt;</span> <span class="token string">&quot;Turn&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, call <code>TickEffectTimer()</code> based on your game logic.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnActionEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    effectSystem<span class="token punctuation">.</span><span class="token function">TickEffectTimer</span><span class="token punctuation">(</span><span class="token string">&quot;Action&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnTurnEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    effectSystem<span class="token punctuation">.</span><span class="token function">TickEffectTimer</span><span class="token punctuation">(</span><span class="token string">&quot;Turn&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="description-builder" tabindex="-1"><a class="header-anchor" href="#description-builder"><span>Description Builder</span></a></h3><p><code>DescriptionBuilder</code> allows you to dynamically display descriptions for any object. By using reflection to match field names, you can replace values in a description with the values of specific fields from an object.</p><p>The fields to be looked up are enclosed in <code>{[ ]}</code>. If a matching field name is found, it will be replaced with the actual value.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClass</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> hp <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">int</span></span> level <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> name <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;Neva&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span> tags <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token string">&quot;element1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;element2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">TestClass</span> testClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">TestClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> descriptionBase <span class="token operator">=</span> <span class="token string">&quot;{[name]} is Lv.{[level]} and hp:{[hp]}, {[tags[0]]} and {[tags[1]]} in tags&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> description <span class="token operator">=</span> DescriptionBuilder<span class="token punctuation">.</span><span class="token function">GetDescriptionFormat</span><span class="token punctuation">(</span>descriptionBase<span class="token punctuation">,</span> testClass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// result is: Neva is Lv.11 and hp:10, element1 and element2 in tags</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you want to implement special query logic, you can inherit from <code>DescriptionBuilder</code> and implement custom logic.</p><p><code>DescriptionBuilderForEffect</code> inherits and utilizes the functionality of <code>DescriptionBuilder</code> to query fields in <code>EffectInfo</code>. It further handles percentage displays, nested data within <code>EffectInfo</code>, and similar complex data requirements.</p><table><thead><tr><th>Purpose</th><th>Method</th><th>Example</th></tr></thead><tbody><tr><td>Display value as a percentage</td><td>Add <code>%</code> at the end of the field name</td><td><code>{[fieldName%]}</code></td></tr><tr><td>Access nested structure within <code>EffectInfo</code></td><td>Append a number to the field name for indexing</td><td><code>{[nestedField2]}</code></td></tr></tbody></table><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token class-name">EffectInfo</span> testEffectInfo <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token constructor-invocation class-name">EffectInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">testEffectInfo<span class="token punctuation">.</span><span class="token keyword">value</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">testEffectInfo<span class="token punctuation">.</span>subInfoIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">&quot;stealth_01&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>DescriptionBuilderForEffect<span class="token punctuation">.</span><span class="token function">GetEffectDescriptionFormat</span><span class="token punctuation">(</span><span class="token string">&quot;Deal {[value%]} x ATK damage. Gain stealth for {[subInfos0.maintainTime]} actions.&quot;</span><span class="token punctuation">,</span> testEffectInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//result is: Deal 100% x ATK damage. Gain stealth for 5 actions.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Note: In the example using subInfos0, you must first register the method to query subInfo to locate it successfully. For detailed registration instructions, see: <a href="./Fundamentals#subinfo">SubInfo</a></p></blockquote>`,27)]))}const l=s(p,[["render",c],["__file","Advanced.html.vue"]]),d=JSON.parse('{"path":"/Advanced.html","title":"Advanced","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Inject model","slug":"inject-model","link":"#inject-model","children":[]},{"level":3,"title":"TimerTickers and IEffectTimers","slug":"timertickers-and-ieffecttimers","link":"#timertickers-and-ieffecttimers","children":[]},{"level":3,"title":"Description Builder","slug":"description-builder","link":"#description-builder","children":[]}],"git":{"updatedTime":1730278962000,"contributors":[{"name":"oldman","email":"oldman@macaca.onmicrosoft.com","commits":2}]},"filePathRelative":"Advanced.md"}');export{l as comp,d as data};
